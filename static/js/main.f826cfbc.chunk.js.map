{"version":3,"sources":["components/Clock/Clock.tsx","components/Clock/index.ts","utils.js","App.tsx","index.tsx"],"names":["Clock","state","time","Date","toLocaleTimeString","timerId","setTimeout","this","setState","setInterval","date","console","log","prevProps","name","props","clearInterval","React","Component","generateName","Math","floor","random","toString","App","isClockVisible","clockName","className","type","onClick","ReactDOM","render","document","getElementById"],"mappings":"8MAWaA,EAAb,4MACEC,MAAQ,CACNC,MAAM,IAAIC,MAAOC,qBACjBC,QAASC,YAAW,cAAU,IAHlC,uDAME,WAAqB,IAAD,OAClBC,KAAKC,SAAS,CACZH,QAASI,aAAY,WACnB,IAAMC,EAAa,IAAIP,KAGvBQ,QAAQC,IAAIF,EAAKN,sBACjB,EAAKI,SAAS,CAAEN,KAAMQ,EAAKN,yBAC1B,SAdT,gCAkBE,SAAmBS,GACbA,EAAUC,OAASP,KAAKQ,MAAMD,MAEhCH,QAAQC,IAAR,qCAA0CC,EAAUC,KAApD,eAA+DP,KAAKQ,MAAMD,SArBhF,kCAyBE,WACEE,cAAcT,KAAKN,MAAMI,WA1B7B,oBA6BE,WACE,IAAQH,EAASK,KAAKN,MAAdC,KAER,OACE,8CAEG,IACAA,SApCT,GAA2Be,IAAMC,WCTlBlB,ICFR,SAASmB,IACd,OAAOC,KAAKC,MAAsB,IAAhBD,KAAKE,UAAgBC,W,UCYnCC,E,4MACJvB,MAAQ,CACNwB,gBAAgB,EAChBC,UAAWP,K,4CAGb,WAAU,IAAD,OACP,EAAsCZ,KAAKN,MAAnCwB,EAAR,EAAQA,eAAgBC,EAAxB,EAAwBA,UAcxB,OACE,sBAAKC,UAAU,MAAf,UACE,6CAAcD,KAEbD,GAAkB,cAAC,EAAD,CAAOX,KAAMY,IAEhC,sBAAKC,UAAU,WAAf,UACE,wBAAQC,KAAK,SAASC,QAnBV,WAChB,EAAKrB,SAAS,CAAEiB,gBAAgB,KAkB5B,wBACA,wBAAQG,KAAK,SAASC,QAhBV,WAChB,EAAKrB,SAAS,CAAEiB,gBAAgB,KAe5B,wBACA,wBAAQG,KAAK,SAASC,QAbZ,WACd,EAAKrB,SAAS,CAAEkB,UAAWP,OAYvB,uC,GA9BQF,IAAMC,WAqCTM,IC/CfM,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.f826cfbc.chunk.js","sourcesContent":["import React from 'react';\n\ntype Props = {\n  name: string,\n};\n\ntype State = {\n  time: string,\n  timerId: NodeJS.Timer,\n};\n\nexport class Clock extends React.Component<Props, State> {\n  state = {\n    time: new Date().toLocaleTimeString(),\n    timerId: setTimeout(() => {}, 0),\n  };\n\n  componentDidMount() {\n    this.setState({\n      timerId: setInterval(() => {\n        const date: Date = new Date();\n\n        // eslint-disable-next-line\n        console.log(date.toLocaleTimeString());\n        this.setState({ time: date.toLocaleTimeString() });\n      }, 1000),\n    });\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.name !== this.props.name) {\n      // eslint-disable-next-line\n      console.log(`The Clock was renamed from ${prevProps.name} to ${this.props.name}`);\n    }\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.state.timerId);\n  }\n\n  render() {\n    const { time } = this.state;\n\n    return (\n      <p>\n        Current time:\n        {' '}\n        {time}\n      </p>\n    );\n  }\n}\n","import { Clock } from './Clock';\n\nexport default Clock;\n","export function generateName() {\n  return Math.floor(Math.random() * 100).toString();\n}\n","import React from 'react';\nimport Clock from './components/Clock';\nimport { generateName } from './utils';\n\nimport './App.scss';\n\ntype Props = {};\n\ntype State = {\n  isClockVisible: boolean,\n  clockName: string,\n};\n\nclass App extends React.Component<Props, State> {\n  state = {\n    isClockVisible: true,\n    clockName: generateName(),\n  };\n\n  render() {\n    const { isClockVisible, clockName } = this.state;\n\n    const showClock = () => {\n      this.setState({ isClockVisible: true });\n    };\n\n    const hideClock = () => {\n      this.setState({ isClockVisible: false });\n    };\n\n    const setName = () => {\n      this.setState({ clockName: generateName() });\n    };\n\n    return (\n      <div className=\"App\">\n        <h1>{`Clock ${clockName}`}</h1>\n\n        {isClockVisible && <Clock name={clockName} />}\n\n        <div className=\"controls\">\n          <button type=\"button\" onClick={showClock}>Show Clock</button>\n          <button type=\"button\" onClick={hideClock}>Hide Clock</button>\n          <button type=\"button\" onClick={setName}>Set random name</button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}